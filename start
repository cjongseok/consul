#!/bin/bash

TRUE="true"
FALSE="false"

readonly IMAGE="progrium/consul"
readonly EXPECT="${EXPECT:-3}"
readonly CONFIG_DIR="/config"
readonly CONFIG_TEMPLATE="$CONFIG_DIR/template.json"
readonly CONFIG_JSON="$CONFIG_DIR/consul.json"
#readonly SCRIPT_DIR=$(dirname $(readlink -e $0))
#readonly DATACENTER=$(getdc.sh)

unset DOCKER_HOST_DC
unset output
on_aws=$FALSE


# ARGUMENTS
#  $1: ipv4 address or fqdn
resolveFQDN() {
    local ip_rexpat="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"

    if [[ $1 =~ $ip_rexpat ]]; then
        echo $1
    else
        echo $(getent hosts $1 | awk '{print $1}')
        #echo $(dig +short $1 | tail -n 1 | awk '{print $1}')
    fi
}

getEc2Region() {
    az=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone/)
    ((to=${#az}-1))
    echo `expr substr $az 1 $to`
}

getEc2Ipv4() {
    echo $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
}


usage() {
    echo "aws-server [-join | -bootstrap-expect]"
}

processArgs() {
    local argv=($@)
    local argp=0
    local argn=$#
    local onAws=false

    #echo "args=$@"

    for ((; argp<argn; argp++)); do
        if [[ ${argv[argp]} == "aws-server" ]]; then
	    on_aws=$TRUE
            local end=$(getEc2Ipv4)
            output=${output}"-server -advertise $end "
        elif [[ ${argv[argp]} == "aws-agent" ]]; then
	    on_aws=$TRUE
            local end=$(getEc2Ipv4)
            output=${output}"-advertise $end "
        elif   [[ ${argv[argp]} == "-server" ]]; then
            output=${output}"-server "
        elif [[ ${argv[argp]} == "-advertise" ]]; then
            local end=${argv[argp+1]}
            output=${output}"-advertise $(resolveFQDN $end) "
            ((argp++))
        elif [[ ${argv[argp]} == "-join" ]]; then
            local end=${argv[argp+1]}
            output=${output}"-join $(resolveFQDN $end) "
            ((argp++))

        elif [[ ${argv[argp]} == "-bootstrap-expect" ]]; then
            local nodenum=${argv[argp+1]}
            local numrex="[0-9]+"
            if [[ "$nodenum" =~ $numrex ]]; then
                output=${output}"-bootstrap-expect $nodenum "
                ((argp++))
            else
                output=${output}"-bootstrap-expect "
            fi

        elif [[ ${argv[argp]} == "-ui-dir" ]]; then
            local resource_path=${argv[argp+1]}
            output=${output}"-ui-dir $resource_path "
            ((argp++))
        elif [[ ${argv[argp]} == "-config-file" ]]; then
            local conf_file=${argv[argp+1]}
            output=${output}"-config-file $conf_file "
            ((argp++))
        else
            echo "Invalid Arguments: ${argv[argp]}"
            exit
        fi
    done
}

configureConsul() {
#    mv $CONFIG_JSON $CONFIG_DIR/.consul.json

    # Add datacenter name to Consul configuration
    if [ -z $DOCKER_HOST_DC ]; then
	if [[ $on_aws == $TRUE ]]; then
            DOCKER_HOST_DC=$(getEc2Region)
	fi
        jq -c '. + {"datacenter":"'$DOCKER_HOST_DC'"}' $CONFIG_TEMPLATE > $CONFIG_JSON
    fi

    cat $CONFIG_JSON
}

main() {
	set -eo pipefail
	case "$1" in
	cmd:run) shift; cmd-run $@;;
    *) 
        processArgs $@
	configureConsul
        echo "cmd=$output"
        echo "exec /bin/consul agent -config-file=${CONFIG_JSON} $output"
        exec /bin/consul agent -config-file=${CONFIG_JSON} $output;;
	esac
}

main "$@"
