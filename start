#!/bin/bash

readonly IMAGE="progrium/consul"
readonly EXPECT="${EXPECT:-3}"
readonly CONFIG_DIR="/config"
readonly CONFIG_JSON="$CONFIG_DIR/consul.json"
#readonly SCRIPT_DIR=$(dirname $(readlink -e $0))
#readonly DATACENTER=$(getdc.sh)

unset DOCKER_HOST_DC

cmd-run() {
	local ip_def="$1"; shift
	local args="$@"

	declare external_ip join_ip bridge_ip run_mode client_flag server_flag

	IFS=':' read external_ip join_ip client_flag <<< "${ip_def//::/:}"

	if [[ -z "$join_ip" ]]; then
		run_mode="-bootstrap-expect $EXPECT"
	else
		run_mode="-join $join_ip"
	fi

	if [[ -z "$client_flag" ]]; then
		server_flag="-server"
	fi

	bridge_ip="$(ip ro | awk '/^default/{print $3}')"
	cat <<EOF
eval docker run --name consul -h \$HOSTNAME \
	-p $external_ip:8300:8300 \
	-p $external_ip:8301:8301 \
	-p $external_ip:8301:8301/udp \
	-p $external_ip:8302:8302 \
	-p $external_ip:8302:8302/udp \
	-p $external_ip:8400:8400 \
	-p $external_ip:8500:8500 \
	-p $bridge_ip:53:53 \
	-p $bridge_ip:53:53/udp \
	$args \
	$IMAGE $server_flag -advertise $external_ip $run_mode
EOF
}


# ARGUMENTS
#  $1: ipv4 address or fqdn
resolveFQDN() {
    local ip_rexpat="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"

    if [[ $1 =~ $ip_rexpat ]]; then
        echo $1
    else
        echo $(getent hosts $1 | awk '{print $1}')
        #echo $(dig +short $1 | tail -n 1 | awk '{print $1}')
    fi
}

usage() {
    echo "aws-server [-join | -bootstrap-expect]"
}

processArgs() {
    local argv=($@)
    local argp=0
    local argn=$#
    local onAws=false
    local output=""

    #echo "args=$@"

    if [[ ${argv[argp]}="aws-server" ]]; then
        local end=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
        #local end=$(curl -s http://instance-data/latest/meta-data/local-ipv4)
        output=${output}"-server -advertise $end "
	((argp++))
    fi

    for ((; argp<argn; argp++)); do
        #echo "arg[$argp]=${argv[argp]}"

        if   [[ ${argv[argp]} == "-server" ]]; then
            output=${output}"-server "

        elif [[ ${argv[argp]} == "-advertise" ]]; then
#	    if ! [[ $CONSUL_ADVERTISE_END = "" ]]; then
#	        local end=$CONSUL_ADVERTISE_END
#                output=${output}"-advertise $end "
#		echo "advertise_end=$end"
#	    else
                local end=${argv[argp+1]}
                output=${output}"-advertise $(resolveFQDN $end) "
                ((argp++))
		echo "advertise_end=$end"
#            fi

        elif [[ ${argv[argp]} == "-join" ]]; then
            local end=${argv[argp+1]}
            output=${output}"-join $(resolveFQDN $end) "
            ((argp++))

        elif [[ ${argv[argp]} == "-bootstrap-expect" ]]; then
            local nodenum=${argv[argp+1]}
            local numrex="[0-9]+"
            if [[ "$nodenum" =~ $numrex ]]; then
                output=${output}"-bootstrap-expect $nodenum "
                ((argp++))
            else
                output=${output}"-bootstrap-expect "
            fi

        elif [[ ${argv[argp]} == "-ui-dir" ]]; then
            local resource_path=${argv[argp+1]}
            output=${output}"-ui-dir $resource_path "
            ((argp++))

        else
            echo "Invalid Arguments: ${argv[argp]}"
            exit
        fi
    done

    echo "$output"
}

configureConsul() {
    mv $CONFIG_JSON $CONFIG_DIR/.consul.json

    # Add datacenter name to Consul configuration
    #DOCKER_HOST_DC=$(curl -s http://instance-data/latest/meta-data/placement/availability-zone) 
    DOCKER_HOST_DC=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone) 
    jq -c '. + {"datacenter":"'$DOCKER_HOST_DC'"}' $CONFIG_DIR/.consul.json > $CONFIG_JSON

    cat $CONFIG_JSON
}

main() {
    configureConsul

	set -eo pipefail
	case "$1" in
	cmd:run)            shift; cmd-run $@;;
	#*)                  exec /bin/consul agent -config-dir=/config $@;;
    #*)                  echo "exec /bin/consul agent -config-dir=/config $(processArgs $@)";;
    #*)                  echo "exec /bin/consul agent -config-dir=/config $(processArgs $@)";exec /bin/consul agent -config-dir=/config $(processArgs $@);;
    *)                  echo "exec /bin/consul agent -config-dir=${CONFIG_DIR} $(processArgs $@)";exec /bin/consul agent -config-dir=/config $(processArgs $@);;
	esac
}

main "$@"
